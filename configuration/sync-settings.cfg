; zzform module
; sync keys
; 
; Part of »Zugzwang Project«
; https://www.zugzwang.org/modules/zzform
; 
; @author Gustaf Mossakowski <gustaf@koenige.org>
; @copyright Copyright © 2024 Gustaf Mossakowski
; @license http://opensource.org/licenses/lgpl-3.0.html LGPL-3.0
; 

[csv_comments]
description = "character(s) that mark(s) begin of commenting lines"
default = "#"

[csv_delimiter]
description = "delimiter of CSV fields per record"
default = ","

[csv_empty_fields_use_instead]
description = "if field is empty, use field value from another field instead (list of empty field_name = field_name)"
list = 1

[csv_enclosure]
description = "enclosure of field value (comma, tab, semicolon etc.)"
default = '"'

[csv_filename]
description = "name of CSV file inside _sync folder"
required[csv] = 1

[csv_first_line_headers]
description = "first line of CSV file = column headers?"
type = bool
default = 1

[csv_fixed_width]
description = "CSV file uses fixed width layout"
type = bool

[csv_fixed_width_replace]
description = "list of fields to replace with a different field name (no spaces allowed in fixed width field names)"
list = 1

[csv_id_only]
description = "get only ID value per record to save memory"
type = bool
scope[] = internal

[csv_ignore_fields]
description = "list of fields to ingore for synchronisation"
list = 1

[csv_key]
description = "row with unique key (0...n), one or more fields"
type = int
list = 1
required[csv] = 1

[csv_key_concat]
description = "string to concatenate keys if there is more than one key set in `csv_key`"
default = ""

[csv_ignore_head_lines]
description = "ignore this number of lines at the beginning of the CSV files"
type = int
default = 0

[csv_source]
description = "full local filename of CSV source"
scope[] = internal

[deletable]
description = "SQL query with all records that can be deleted (with placeholder for all keys of records)"
type = query

[deletable_script_path]
description = "additional path to edit deletable records"
type = path
list = 1

[end]
description = "no. of last record of this batch processing"
type = int
scope[] = internal

[existing]
description = "query to get all existing records, with fields containing key from source and ID from database table"
type = query
required = 1

[existing_order_by]
description = 'ORDER BY field for existing query, indexed by table name'
list = 1

[fields]
description = "list of fields to syncronise, indexed by position"
list = 1
required = 1

[field]
description = "list of fields, indexed by field name with query to get ID value from database (definition in sync.sql: identifier + '_field_' + field_name)"
type = sql
list = 1

[field_implode]
description = "characters to implode field values defined in `field`, defaulting to `,` (definition in sync.sql: identifier + '_field_' + field_name + '__implode')"
list = 1

[form_script]
description = "name of table definition to use for this synchronisation"
required = 1

[function]
description = "list of functions applied to each value, per field (index = field no)"
list = 1

[identifier]
description = "identifier for URL path, to call this script"
;scope[] = internal

[ignore_if_null]
description = "list of field nos (from `fields`) which will be ignored if no value is set"
type = int
list = 1
; @todo use field names instead

[limit]
description = "current start limit of records that are syncronised (via GET parameter)"
type = int
scope[] = internal

[logging]
description = "use zzform logging"
type = bool
default = 1

[package]
description = "name of package that synchronisation settings are from"
;scope[] = internal

[script_path]
description = "path setting for URL to edit a record, e. g. `contacts_general` (will be preferred over `script_url`)"

[script_url]
description = "URL to edit a record"
type = path

[show_but_no_import]
description = "list of fields nos. that are only shown, but not syncronised"
type = int
list = 1

[source]
description = "SQL query with all records to be syncronised"
type = query
required[sql] = 1

[source_id_field_name]
description = "field name of `source` SQL query that holds unique values"
required[sql] = 1

[sparql_uri]
description = "URL of server where to query SPARQL requests"
type = url

[sparql_raw_function]
description = "custom function to format RAW data"
type = function

[split_function]
description = "list of split functions, indexed per no of field, as an alternative to `function`, splits values at + sign"
list = 1

[static]
description = "static definitions of fields, field_name = value, to import the same value for every record (definition in sync.sql: identifier + '_static1', … '_static99')"
type = list

[sync_records_per_run]
description = "no. of records per run, set via setting `sync_records_per_run`, multiplied by 10 if not in testing environment"
type = int

[testing]
description = "require interaction, so that each record that is not in sync can be syncronised manually"
type = bool

[title]
description = "title of synchronisation script, used to display for orientation"

[type]
description = "type of synchronisation, via SQL from a different database table or via CSV from an CSV file"
type = enum
enum[] = sql
enum[] = csv
enum[] = sparql
