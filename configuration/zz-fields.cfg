; zzform
; $zz['fields'][$no] keys
; 
; Part of »Zugzwang Project«
; https://www.zugzwang.org/modules/zzform
; 
; @author Gustaf Mossakowski <gustaf@koenige.org>
; @copyright Copyright © 2023-2025 Gustaf Mossakowski
; @license http://opensource.org/licenses/lgpl-3.0.html LGPL-3.0
; 
; currently, only section `identifier` is used, rest for documentation only

[add_details]
description = "Link to add missing records for a select field; might be plain URL or link array"
example[] = "['area' => 'contacts_general']"
example[] = "/path/"
record_view = 1
see = add_details_target

[add_details_target]
description = "target window for add_details"
example[] = "_blank"
record_view = 1
see = add_details

[append_next]
description = "Show next field in same row for the record view"
see = list_append_next
type = bool
record_view = 1

[auto_value]
description = "Automatically set value for this field, currently, only 'increment' is supported"
exampe[] = "increment"

[buttons]
description = "List of JavaScript buttons for replacing field content"
list = 1
enum[] = round_date

[cfg]
description = "Contents of .cfg file as source for dependencies, read with wrap_cfg_files()"
list = 1

[character_set]
description = "Character encoding for field, only necessary if different from default character encoding"
example[] = "utf-8"

[class]
description = "CSS class(es)"
record_view = 1
list_view = 1

[cols]
description = "Number of columns for memo fields (textarea)"
type = int
record_view = 1
field_type = memo
see = rows

[def_val_ignore]
description = "For detail records, ignore this field if value = default value or static value if determining the state of a detail record"
field_type = subtable
see = for_action_ignore
type = bool

[default]
description = "Default value for field; use 'current_date' for date, datetime and time fields to get the current date"

[dependencies]
description = "List of field nos. that are displayed dependent on this field"
list = 1
example[] = '[6, 4]'

[dependencies_function]
description = "Function that interprets the data for dependencies set in 'cfg'"
type = function
example = "zz_cfg_read"

[display_field]
description = "Field from SQL query to display in the list view, e. g. instead of ID values"
list_view = 1

[display_value]
description = "Fixed value to display in a field"
field_type = display
record_view = 1
list_view = 1

[display_title]
description = "List of values to be shown instead of values from database (list indexed by database value)"
field_type = display
record_view = 1
list_view = 1
list = 1

[dont_trim]
description = "Do not trim field content of spaces"
field_type = text
type = bool

[exclude_from_search]
description = "Exclude field from internal search function"
type = bool
list_view = 1

[explanation]
description = "Text below field that explains what is expected to be put into this field"
record_view = 1
translate = 1

[explanation_top]
description = "Text above field that explains what is expected to be put into this field"
record_view = 1
translate = 1

[export_csv_maxlength]
description = "Maximum length of characters for a CSV field"
list_view = 1
type = int

[export_no_html]
description = "Remove HTML code for export"
type = bool
list_view = 1

[enum]
description = "Enum values for a SELECT element"
translate = 1
list = 1

[enum_abbr]
description = "Further explanation values defined in 'enum', will be shown as full text in the record view, as abbreviation in the list view"
list = 1

[enum_title]
description = "Values that are shown instead of values defined in 'enum'"
list = 1

[field_name]
description = "Database field name"

[field_sequence]
description = "Normally, fields are displayed in the order they are defined; here, a different field sequence can be defined"
type = number

[enum_translated]
description = ""
field_type = select
list = 1
; @todo still in use?

[fields]
description = "List of fields of a detail table or list of fields for identifier or for function"
list = 1

[for_action_ignore]
description = "For detail records, always ignore this field"
see = def_val_ignore
field_type = subtable
type = bool

[form_display]
description = "Layout of detail record"
type = enum
enum[] = vertical ; vertical layout as in main record
enum[] = horizontal ; horizontal table layout
enum[] = inline ; detail table fields are treated as fields in main record, only for 1:1 relations
enum[] = lines ; no table layout for detail record
enum[] = set ; one field per record from a list is shown, for m:n tables, click will save record
default = vertical
field_type = subtable

[format]
description = "Function for formatting a field value in the record view"
see = list_format
type = function
record_view = 1

[formatting_spaces]
description = "Number of spaces that can be added if field is formatted"
type = int

[function]
description = "Function that changes input after posting it, using field names in 'fields' as input"
type = function
see = fields

[geo_format]
description = "Format for wrap_latitude(), how to format a geographical coordinate"
enum[] = dms; degree + minute + second
enum[] = dm; degree + minute
enum[] = dec; decimal value; all may be appended by =other, e. g. dms=deg

[geocode]
description = "Marker for fields using for geocoding of places"
enum[] = street_name
enum[] = postal_code
enum[] = locality
enum[] = country_id
enum[] = latitude
enum[] = longitude

[geocode_ignore_if]
description = "Ignore this field for geocoding if it has this value (field name/value pairs)"
list = 1

[geocode_ignore_update]
description = "Ignore this field for determining whether to update geocoding or not"
type = bool

[geocode_default]
description = "Use as default value for geocoding for field if it has no value"

[geocode_sql]
description = "Query to get value for geocoding from database"
type = query

[geojson]
description = "Key that specifies the usage of a field for GeoJSON export"
enum[] = latitude
enum[] = longitude
enum[] = id
enum[] = title
enum[] = identifier
enum[] = category
enum[] = latitude/longitude

[group]
description = "Use this field name from query to group entries"
field_type = select
type = fieldname

[hide_in_form]
description = "Hide field in the record view"
type = bool
record_view = 1

[hide_in_list]
description = "Hide field in the list view"
type = bool
list_view = 1

[hide_in_list_if_empty]
description = "Hide field in the list view if all values on the displayed page are empty"
type = bool
list_view = 1

[hide_novalue]
description = "Hide value for no selection for radio buttons or checkboxes"
field_type = select
type = bool
default = 1

[hide_zeros]
description = "Do not show 0 values"
type = bool
list_view = 1
record_view = 1

[id_field_name]
deprecated = 1
see = key_field_name

[identifier]
description = "Requirements for creating identifiers"
field_type = identifier
list = 1

["identifier[concat]"]
description = "String or array of strings used for concatenation of variables. if array, values are used in the same order they appear in the array"
field_type = identifier
default = .

["identifier[empty]"]
description = "List of values (field_name => value) that are used as a default if there is no value"
field_type = identifier
list = 1

["identifier[exists]"]
description = "String used for concatenation if identifier exists"
field_type = identifier
default = .

["identifier[exists_format]"]
description = "Sprintf() format for numerical value that is appended if identifier already exists"
field_type = identifier
default = %s

["identifier[exists_function]"]
description = "Function to determine whether existing identifiers should change or not (e. g. for events moved to a different year, change, otherwise not)"
field_type = identifier
type = function

["identifier[fields]"]
description = "List of fields used to create the identifier, notation like category_id[parameters] possible"
field_type = identifier
list = 1

["identifier[forceFilename]"]
description = "String that will be used for replacing spaces and unknown letters"
field_type = identifier
default = -

["identifier[function]"]
description = "Name of function that identifier will go through finally"
field_type = identifier

["identifier[function_parameter]"]
description = "Up to 4 function parameters to pass to function, if none is set, use identifier as parameter"
field_type = identifier
list = 1

["identifier[hash_md5]"]
description = "Create hash from identifier and current timestamp"
field_type = identifier
type = bool

["identifier[ignore]"]
description = "List of fields that are ignored for creation of identifier (fields were used before)"
field_type = identifier
list = 1

["identifier[ignore_this_if]"]
description = "List of fields (field1 => field2) that are ignored, e. g. field1 is ignored if field2 has a value"
field_type = identifier
list = 1

["identifier[ignore_this_if_identical]"]
description = "List of fields (field1 => field2) that are ignored, e. g. field1 is ignored if field2 has an identical value"
field_type = identifier
list = 1

["identifier[lowercase]"]
description = "Transform all letters to lowercase?"
field_type = identifier
default = 1
type = bool

["identifier[max_length]"]
description = "Maximum length of identifier"
field_type = identifier
type = int
default = 36

["identifier[parameters]"]
description = "Name of field in `fields` that contains parameters that are added to identifier configuration"
field_type = identifier

["identifier[prefix]"]
description = "Prefix that will always be added before identifier"
field_type = identifier

["identifier[preferred]"]
description = "If there can be more than one sub record, find preferred sub record via values, e. g. IDs. example: $zz['fields'][2]['identifier']['preferred']['objects-Title'] = ['text_language_id' => [wrap_id('languages', '-id'), wrap_id('languages', '---'), wrap_id('languages', 'eng')]];"
field_type = identifier
list = 1

["identifier[random_hash]"]
description = "Use a random hash as identifier, length of characters"
field_type = identifier
type = int

["identifier[random_hash_charset]"]
description = "String with characters used for random_hash"
field_type = identifier

["identifier[remove_strings]"]
description = "List of strings that are removed from values for identifier"
field_type = identifier
list = 1

["identifier[replace]"]
description = "Key => value; characters in key will be replaced by value"
field_type = identifier
list = 1

["identifier[replace_fields]"]
description = "Replace field names for translations"
field_type = identifier
list = 1

["identifier[slashes]"]
description = "Preserve slashes?"
field_type = identifier
type = bool

["identifier[sql]"]
description = "SQL query to check if identifier already exists"
field_type = identifier
type = query
scope[] = internal

["identifier[start]"]
description = "Value from which the first identical identifier begins to count up"
field_type = identifier
type = int
default = 2

["identifier[start_always]"]
description = "Always append start value, even for first occurence of an identifier"
field_type = identifier
type = bool

["identifier[strip_tags]"]
description = "Strip HTML tags with strip_tags()"
field_type = identifier
type = bool

["identifier[unique_with]"]
description = "List of extra fields that are needed to create a query with a unique result"
field_type = identifier
list = 1
type = fieldname

["identifier[uppercase]"]
description = "Transform all letters to uppercase?"
field_type = identifier
type = bool

["identifier[values]"]
description = "Pairs of field_name => value (optional if not called via zzform, normally via ['fields'])"
field_type = identifier
list = 1

["identifier[where]"]
description = "WHERE-condition to be appended to query that checks existence of identifier in database"
field_type = identifier
type = query

[if]
description = "List of definitions that are added to table definition if a condition is not true, indexed by key of condition"
list = 1

["if[export_mode]"]
description = "List of definitions that are added to table definition if in export mode"
list = 1

["if[multi]"]
description = "List of definitions that are added to table definition if in batch mode"
list = 1

["if[revise]"]
description = "List of definitions that are added to table definition if in revision mode"
list = 1

["if[where]"]
description = "List of definitions that are added to table definition if in where condition on this field is active"
list = 1

[if_single_record]
description = "List of definitions that are added to table definition if there is only a single record shown"
list = 1
record_view = 1

[inherit_format]
description = "Inherit type and format of translated field"
type = bool

[input_only]
description = "Field whose content is not stored in database but is used, e. g., for hook functions"
type = bool

[input_type_date]
description = "Use `date` for inputs with dates, not `text` (little less flexible, but datepicker)"
type = bool
field_type = date

[key_field_name]
description = "For SQL queries, ID field name; set only if different from first field in SELECT"
field_type = select

[kml]
description = "Key that specifies the usage of a field for KML export"
enum[] = latitude
enum[] = longitude
enum[] = altitude
enum[] = point
enum[] = title
enum[] = style

[link]
description = "Link that is put below field value, constructed from field and string values"
list = 1
type = filepath
list_view = 1

[list_abbr]
description = "Field name of field to show as abbreviation for this value"
list_view = 1
type = fieldname

[list_append_if_middle]
description = "String to show behind fields in the middle if one or more fields are appended (e. g. comma)"
list_view = 1
translate = 1

[list_append_if_first]
description = "String to show behind the first field if one or more fields are appended (e. g. comma)"
list_view = 1
translate = 1

[list_append_next]
description = "Show next field in same column for the list view"
type = bool
see = append_next
list_view = 1

[list_concat_fields]
description = "Characters shown for concatenation of values for geo point"
field_type = geo_point
list_view = 1

[list_format]
description = "Function for formatting a field value in the list view"
see = format
type = function
list_view = 1

[list_function]
description = "Function for a field value in the list view if type is 'list_function'"
type = function
list_view = 1

[list_hide_value]
description = "Hide value in list view"
type = bool
list_view = 1

[list_prefix]
description = "Text that is shown before a value in the list view"
list_view = 1

[list_prefix_append]
description = "Text that is shown before a value of the first field that has others appended in the list view "
list_view = 1
translate = 1

[list_suffix]
description = "Text that is shown behind a value in the list view"
see = suffix
list_view = 1

[list_suffix_append]
description = "Text that is shown behind a value of the last field that was appended in the list view "
list_view = 1
translate = 1

[list_unit]
description = "Unit shown after a value if it is not empty, list view"
see = unit
default_from = unit
list_view = 1

[log_username]
description = "Use this field’s value as username for logging after insert"
type = bool

[max_records]
description = "Maximum of allowed detail records"
type = int
field_type = subtable

[merge_append]
description = "Append value to existing field; if set to non-boolean value, use as concatenation string"

[merge_equal]
description = "Require that the values ​​in this field are the same in all merged records"
type = bool

[merge_ignore]
description = "Ignore this field value for merging"
type = bool

[min_records]
description = "Minimum of shown detail records"
type = int
field_type = subtable

[min_records_required]
description = "Minimum of required detail records"
type = int
field_type = subtable

[not_identical_with]
description = "Another field in the definition whose value must not be identical to this one"
type = fieldname

[null]
description = "Allow to save a value of 0 instead of a NULL value"
type = bool

[null_string]
description = "Allow to save an empty string instead of a NULL value"
type = bool

[number_type]
description = "Define a special type of a number"
enum[] = currency
enum[] = latitude
enum[] = longitude
enum[] = bytes
enum[] = number
enum[] = rating

[path]
description = "Path for filename"
type = filepath
field_type[] = image
field_type[] = upload_image

[placeholder]
description = "Show a placeholder in an input or textarea field; true: create from field name, otherwise: show this text"
translate = 1
record_view = 1

[post_validation]
description = "Function that is called after validation step for a field with the field value"
type = function

[required]
description = "Marks a field as required for input"
type = bool

[remove_local_hostname]
description = "Removes local hostname from URLs"
type = bool
default = 1
field_type = url

[round_date]
description = "round a date to n minutes, defined in setting `zzform_date_round_to_min`"
type = bool
field_type = date

[rows]
description = "Number of rows for memo fields (textarea)"
type = int
record_view = 1
field_type = memo
see = cols

[search]
description = "SQL field that is used for search (e. g. if field name is different from display field)"
type = fieldname

[select_dont_force_single_value]
description = "If there is only one value returning from a query, do not force to use this as the value for the field"
field_type = select
type = bool

[select_empty_no_add]
description = "If set to true, do not allow to add a subrecord if the query returns no records"
field_type = select
type = bool

[separator]
description = "Separator after field"

[separator_before]
description = "Separator before field"
example[] = "text <div class=\"separator\">Sonstiges</div>"

[set]
description = "Set values for a SELECT element"
field_type = select
list = 1
; translate = 1 @todo check

[set_abbr]
description = "Further explanation values defined in 'set', will be shown as full text in the record view, as abbreviation in the list view"
list = 1
field_type = select

[set_folder]
description = "Use content of this folder as values for a set"
field_type = select
type = filename

[set_show_all_values]
description = ""
field_type = select
type = bool

[set_sql]
description = "Read values for a set from database"
field_type = select
type = query

[set_title]
description = "Values that are shown instead of values defined in 'set'"
field_type = select
list = 1

[set_translated]
description = ""
field_type = select
list = 1
; @todo still in use?

[show_hierarchy]
description = "Field name that contains the main hierarchy ID"
field_type = select
type = fieldname

[show_hierarchy_same_table]
description = "Set to true if hierarchy is in same table to disallow moving items to be children of themselves"
type = bool
field_type = select

[show_hierarchy_subtree]
description = "ID in result of query that is used as the top of the hierarchical display of records"
field_type = select
type = int
see = show_hierarchy

[show_hierarchy_use_top_value_instead_NULL]
description = "Instead of saving NULL if no ID is chosen, save value defined in show_hierarchy"
see = show_hierarchy
type = bool

[size]
description = "Size of an input field"
type = int

[sql]
description = "Query to get values for a SELECT field (or existing values of text field)"
field_type[] = select
field_type[] = text
type = query

[sql_association]
description = "Query to get values for a SELECT field, with parent/child relation exchanged"
field_type = select
type = query

[sql_character_set]
description = "List of character encodings per key in an SQL query"
field_type = select
example[] = "[2] = 'latin1'"
list = 1

[sql_dependency]
description = "List of queries for a dependent field reading values that fit for the values entered into the main fields"
example[] = "[6] = 'SHOW COLUMNS FROM %s WHERE `Key` = \"PRI\";'"
field_type = select
list = 1

[sql_fieldnames_ignore]
description = "List of field names that are ignored when searching for a value to be found in a query"
field_type = select
list = 1

[sql_ignore]
description = "List of fields that are not shown in SELECT, but used otherwise"
type = fieldname
field_type = select
list = 1

[sql_translate]
description = "List of tables, indexed by table primary ID, to use for translations"
field_type = select
list = 1
example = "['usergroup_id' => 'usergroup']"

[sql_where_with_id]
description = "Allows you to append the main record ID (passed via id=...) to a WHERE clause in an SQL query"
type = bool

[suffix]
description = "Text that appears behind value in record view"
record_view = 1
see = list_suffix

[sum]
description = "Build a sum of the values in this field, show sum in footer"
list_view = 1
type = bool

[title]
description = "Title of field, shown in the record and the list view"
translate = 1
default_from = field_name
record_view = 1
list_view = 1

[title_append]
description = "Title of field, use if another field is appended to this field"
translate = 1
record_view = 1

[title_tab]
description = "Title of field in the list view, if it should be different from the record view"
translate = 1
list_view = 1

[translate_field_value]
description = "Translate the values of this field"
type = bool
record_view = 1
list_view = 1

[trim]
description = "Trim field content of spaces"
field_type = memo
type = bool

[type]
description = "Type of field"
enum[] = calculated
enum[] = captcha
enum[] = date
enum[] = datetime
enum[] = detail_key
enum[] = display
enum[] = foreign
enum[] = foreign_id
enum[] = foreign_key
enum[] = foreign_table
enum[] = geo_point
enum[] = hidden
enum[] = id
enum[] = identifier
enum[] = image
enum[] = ip
enum[] = ipv4
enum[] = list_function
enum[] = mail
enum[] = mail+name
enum[] = memo
enum[] = number
enum[] = option
enum[] = password
enum[] = password_change
enum[] = parameter
enum[] = phone
enum[] = predefined
enum[] = select
enum[] = sequence
enum[] = subtable
enum[] = text
enum[] = time
enum[] = timestamp
enum[] = translation_key
enum[] = unix_timestamp
enum[] = upload_image
enum[] = url
enum[] = url+placeholder
enum[] = username
enum[] = write_once
default = text

[type_detail]
description = "Type of field if main type is generic"
see = type
field_type[] = hidden
field_type[] = write_once
field_type[] = display

[typo_cleanup]
description = "Clean up some typography issues, e. g. quotation marks, spaces, etc."
type = bool

[unit]
description = "Unit shown after a value if it is not empty"
see = list_unit
record_view = 1
list_view = 1

[unless]
description = "List of definitions that are added to table definition if a condition is not true, indexed by key of condition"
see = if
list = 1

["validate[forbidden_strings]"]
description = "List of strings that are not allowed to be entered in this field"
list = 1
example[] = "['://']"

[value]
description = "Predefined value for a field"

[word_split]
description = "Split words in the list view, for better readability"
list_view = 1
type = bool
