; * zzform
; * $zz['fields'][$no] keys
; *
; * Part of »Zugzwang Project«
; * https://www.zugzwang.org/modules/zzform
; *
; * @author Gustaf Mossakowski <gustaf@koenige.org>
; * @copyright Copyright © 2023-2025 Gustaf Mossakowski
; * @license http://opensource.org/licenses/lgpl-3.0.html LGPL-3.0
; 
; currently, only section `identifier` is used, rest for documentation only

[form_display]
description = "layout of detail record"
type = enum
enum[] = vertical ; vertical layout as in main record
enum[] = horizontal ; horizontal table layout
enum[] = inline ; detail table fields are treated as fields in main record, only for 1:1 relations
enum[] = lines ; no table layout for detail record
enum[] = set ; one field per record from a list is shown, for m:n tables, click will save record
default = vertical

[identifier]
description = "requirements for creating identifiers"
list = 1

["identifier[concat]"]
description = "string or array of strings used for concatenation of variables. if array, values are used in the same order they appear in the array"
default = .

["identifier[empty]"]
description = "list of values (field_name => value) that are used as a default if there is no value"
list = 1

["identifier[exists]"]
description = "string used for concatenation if identifier exists"
default = .

["identifier[exists_format]"]
description = "sprintf() format for numerical value that is appended if identifier already exists"
default = %s

["identifier[exists_function]"]
description = "function to determine whether existing identifiers should change or not (e. g. for events moved to a different year, change, otherwise not)"
type = function

["identifier[fields]"]
description = "list of fields used to create the identifier, notation like category_id[parameters] possible"
list = 1

["identifier[forceFilename]"]
description = "string that will be used for replacing spaces and unknown letters"
default = -

["identifier[function]"]
description = "name of function that identifier will go through finally"

["identifier[function_parameter]"]
description = "up to 4 function parameters to pass to function, if none is set, use identifier as parameter"
list = 1

["identifier[hash_md5]"]
description = "create hash from identifier and current timestamp"
type = bool

["identifier[ignore]"]
description = "list of fields that are ignored for creation of identifier (fields were used before)"
list = 1

["identifier[ignore_this_if]"]
description = "list of fields (field1 => field2) that are ignored, e. g. field1 is ignored if field2 has a value"
list = 1

["identifier[ignore_this_if_identical]"]
description = "list of fields (field1 => field2) that are ignored, e. g. field1 is ignored if field2 has an identical value"
list = 1

["identifier[lowercase]"]
description = "transform all letters to lowercase?"
default = 1
type = bool

["identifier[max_length]"]
description = "maximum length of identifier"
type = int
default = 36

["identifier[parameters]"]
description = "name of field in `fields` that contains parameters that are added to identifier configuration"

["identifier[prefix]"]
description = "prefix that will always be added before identifier"

["identifier[preferred]"]
description = "if there can be more than one sub record, find preferred sub record via values, e. g. IDs. example: $zz['fields'][2]['identifier']['preferred']['objects-Title'] = ['text_language_id' => [wrap_id('languages', '-id'), wrap_id('languages', '---'), wrap_id('languages', 'eng')]];"
list = 1

["identifier[random_hash]"]
description = "use a random hash as identifier, length of characters"
type = int

["identifier[random_hash_charset]"]
description = "string with characters used for random_hash"

["identifier[remove_strings]"]
description = "list of strings that are removed from values for identifier"
list = 1

["identifier[replace]"]
description = "key => value; characters in key will be replaced by value"
list = 1

["identifier[replace_fields]"]
description = "replace field names for translations"
list = 1

["identifier[slashes]"]
description = "preserve slashes?"
type = bool

["identifier[sql]"]
description = "SQL query to check if identifier already exists"
type = query
scope[] = internal

["identifier[start]"]
description = "value from which the first identical identifier begins to count up"
type = int
default = 2

["identifier[start_always]"]
description = "always append start value, even for first occurence of an identifier"
type = bool

["identifier[strip_tags]"]
description = "strip HTML tags with strip_tags()"
type = bool

["identifier[unique_with]"]
description = "list of extra fields that are needed to create a query with a unique result"
list = 1
type = fieldname

["identifier[uppercase]"]
description = "transform all letters to uppercase?"
type = bool

["identifier[values]"]
description = "pairs of field_name => value (optional if not called via zzform, normally via ['fields'])"
list = 1

["identifier[where]"]
description = "WHERE-condition to be appended to query that checks existence of identifier in database"
type = sql

[input_type_date]
description = "use `date` for inputs with dates, not `text` (little less flexible, but datepicker)"
type = bool
